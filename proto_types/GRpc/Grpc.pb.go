// Code generated by protoc-gen-go.
// source: Grpc.proto
// DO NOT EDIT!

/*
Package Grpc is a generated protocol buffer package.

It is generated from these files:
	Grpc.proto

It has these top-level messages:
	MsgRequest
	MsgResponse
*/
package Grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// request possible methods
type MsgMethod int32

const (
	MsgMethod_UNKNOWN MsgMethod = 0
	MsgMethod_GET     MsgMethod = 1
	MsgMethod_POST    MsgMethod = 2
)

var MsgMethod_name = map[int32]string{
	0: "UNKNOWN",
	1: "GET",
	2: "POST",
}
var MsgMethod_value = map[string]int32{
	"UNKNOWN": 0,
	"GET":     1,
	"POST":    2,
}

func (x MsgMethod) String() string {
	return proto.EnumName(MsgMethod_name, int32(x))
}
func (MsgMethod) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// request msg
type MsgRequest struct {
	Module    string    `protobuf:"bytes,1,opt,name=module" json:"module,omitempty"`
	Msgmethod MsgMethod `protobuf:"varint,2,opt,name=msgmethod,enum=MsgMethod" json:"msgmethod,omitempty"`
	Payload   string    `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
}

func (m *MsgRequest) Reset()                    { *m = MsgRequest{} }
func (m *MsgRequest) String() string            { return proto.CompactTextString(m) }
func (*MsgRequest) ProtoMessage()               {}
func (*MsgRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MsgRequest) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *MsgRequest) GetMsgmethod() MsgMethod {
	if m != nil {
		return m.Msgmethod
	}
	return MsgMethod_UNKNOWN
}

func (m *MsgRequest) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

// request msg response
type MsgResponse struct {
	Status  string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Data    string `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *MsgResponse) Reset()                    { *m = MsgResponse{} }
func (m *MsgResponse) String() string            { return proto.CompactTextString(m) }
func (*MsgResponse) ProtoMessage()               {}
func (*MsgResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MsgResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *MsgResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *MsgResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgRequest)(nil), "MsgRequest")
	proto.RegisterType((*MsgResponse)(nil), "MsgResponse")
	proto.RegisterEnum("MsgMethod", MsgMethod_name, MsgMethod_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Hector service

type HectorClient interface {
	Execute(ctx context.Context, in *MsgRequest, opts ...grpc.CallOption) (*MsgResponse, error)
	ExecuteStream(ctx context.Context, in *MsgRequest, opts ...grpc.CallOption) (Hector_ExecuteStreamClient, error)
}

type hectorClient struct {
	cc *grpc.ClientConn
}

func NewHectorClient(cc *grpc.ClientConn) HectorClient {
	return &hectorClient{cc}
}

func (c *hectorClient) Execute(ctx context.Context, in *MsgRequest, opts ...grpc.CallOption) (*MsgResponse, error) {
	out := new(MsgResponse)
	err := grpc.Invoke(ctx, "/Hector/Execute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hectorClient) ExecuteStream(ctx context.Context, in *MsgRequest, opts ...grpc.CallOption) (Hector_ExecuteStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Hector_serviceDesc.Streams[0], c.cc, "/Hector/ExecuteStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &hectorExecuteStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Hector_ExecuteStreamClient interface {
	Recv() (*MsgResponse, error)
	grpc.ClientStream
}

type hectorExecuteStreamClient struct {
	grpc.ClientStream
}

func (x *hectorExecuteStreamClient) Recv() (*MsgResponse, error) {
	m := new(MsgResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Hector service

type HectorServer interface {
	Execute(context.Context, *MsgRequest) (*MsgResponse, error)
	ExecuteStream(*MsgRequest, Hector_ExecuteStreamServer) error
}

func RegisterHectorServer(s *grpc.Server, srv HectorServer) {
	s.RegisterService(&_Hector_serviceDesc, srv)
}

func _Hector_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HectorServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hector/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HectorServer).Execute(ctx, req.(*MsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hector_ExecuteStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MsgRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HectorServer).ExecuteStream(m, &hectorExecuteStreamServer{stream})
}

type Hector_ExecuteStreamServer interface {
	Send(*MsgResponse) error
	grpc.ServerStream
}

type hectorExecuteStreamServer struct {
	grpc.ServerStream
}

func (x *hectorExecuteStreamServer) Send(m *MsgResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Hector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Hector",
	HandlerType: (*HectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _Hector_Execute_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecuteStream",
			Handler:       _Hector_ExecuteStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "Grpc.proto",
}

func init() { proto.RegisterFile("Grpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xbb, 0x6d, 0x49, 0xcc, 0x44, 0x25, 0xcc, 0x41, 0x82, 0xa7, 0x92, 0x83, 0x04, 0x85,
	0x45, 0xea, 0x33, 0x94, 0x0a, 0x92, 0x54, 0x92, 0x8a, 0x57, 0xd7, 0x64, 0x48, 0x0f, 0x5d, 0x37,
	0x66, 0x36, 0xa0, 0x6f, 0x2f, 0x5d, 0x13, 0xeb, 0xa9, 0xb7, 0xfd, 0x76, 0x87, 0xff, 0xfb, 0x77,
	0x00, 0xd6, 0x5d, 0x5b, 0xc9, 0xb6, 0x33, 0xd6, 0x24, 0x3b, 0x80, 0x8c, 0x9b, 0x82, 0x3e, 0x7b,
	0x62, 0x8b, 0x57, 0xe0, 0x69, 0x53, 0xf7, 0x7b, 0x8a, 0xc5, 0x42, 0xa4, 0x41, 0x31, 0x10, 0xa6,
	0x10, 0x68, 0x6e, 0x34, 0xd9, 0x9d, 0xa9, 0xe3, 0xe9, 0x42, 0xa4, 0x97, 0x4b, 0x90, 0x19, 0x37,
	0x99, 0xbb, 0x29, 0x8e, 0x8f, 0x18, 0x83, 0xdf, 0xaa, 0xef, 0xbd, 0x51, 0x75, 0x3c, 0x73, 0x11,
	0x23, 0x26, 0x25, 0x84, 0xce, 0xc4, 0xad, 0xf9, 0x60, 0x3a, 0xa8, 0xd8, 0x2a, 0xdb, 0xf3, 0xa8,
	0xfa, 0xa5, 0x43, 0x80, 0x26, 0x66, 0xd5, 0x90, 0x13, 0x05, 0xc5, 0x88, 0x88, 0x30, 0xaf, 0x95,
	0x55, 0x43, 0xae, 0x3b, 0xdf, 0xde, 0x41, 0xf0, 0x57, 0x03, 0x43, 0xf0, 0x5f, 0xf2, 0xa7, 0x7c,
	0xf3, 0x9a, 0x47, 0x13, 0xf4, 0x61, 0xb6, 0x5e, 0x6d, 0x23, 0x81, 0x67, 0x30, 0x7f, 0xde, 0x94,
	0xdb, 0x68, 0xba, 0x7c, 0x03, 0xef, 0x91, 0x2a, 0x6b, 0x3a, 0xbc, 0x01, 0x7f, 0xf5, 0x45, 0x55,
	0x6f, 0x09, 0x43, 0x79, 0xfc, 0xff, 0xf5, 0xb9, 0xfc, 0x57, 0x31, 0x99, 0xa0, 0x84, 0x8b, 0x61,
	0xae, 0xb4, 0x1d, 0x29, 0x7d, 0x72, 0xfa, 0x5e, 0xbc, 0x7b, 0x6e, 0xa9, 0x0f, 0x3f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x2f, 0xec, 0xf3, 0xf4, 0x62, 0x01, 0x00, 0x00,
}
