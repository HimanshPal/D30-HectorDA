# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities

import d20_pb2 as d20__pb2


class HectorStub(object):
  """The Add service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Do = channel.unary_unary(
        '/pb.Hector/Do',
        request_serializer=d20__pb2.Request.SerializeToString,
        response_deserializer=d20__pb2.Response.FromString,
        )
    self.ResolveAlias = channel.unary_unary(
        '/pb.Hector/ResolveAlias',
        request_serializer=d20__pb2.Request.SerializeToString,
        response_deserializer=d20__pb2.Response.FromString,
        )
    self.AtomicAdd = channel.unary_unary(
        '/pb.Hector/AtomicAdd',
        request_serializer=d20__pb2.Request.SerializeToString,
        response_deserializer=d20__pb2.Response.FromString,
        )
    self.TxBegin = channel.unary_unary(
        '/pb.Hector/TxBegin',
        request_serializer=d20__pb2.TxBeginRequest.SerializeToString,
        response_deserializer=d20__pb2.TxBeginResponse.FromString,
        )
    self.TxDo = channel.unary_unary(
        '/pb.Hector/TxDo',
        request_serializer=d20__pb2.Request.SerializeToString,
        response_deserializer=d20__pb2.Response.FromString,
        )
    self.TxCommit = channel.unary_unary(
        '/pb.Hector/TxCommit',
        request_serializer=d20__pb2.TxCommitRequest.SerializeToString,
        response_deserializer=d20__pb2.TxCommitResponse.FromString,
        )
    self.TxRollback = channel.unary_unary(
        '/pb.Hector/TxRollback',
        request_serializer=d20__pb2.TxRollbackRequest.SerializeToString,
        response_deserializer=d20__pb2.TxRollbackResponse.FromString,
        )
    self.GetStream = channel.unary_stream(
        '/pb.Hector/GetStream',
        request_serializer=d20__pb2.Request.SerializeToString,
        response_deserializer=d20__pb2.Response.FromString,
        )


class HectorServicer(object):
  """The Add service definition.
  """

  def Do(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ResolveAlias(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AtomicAdd(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def TxBegin(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def TxDo(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def TxCommit(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def TxRollback(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetStream(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_HectorServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Do': grpc.unary_unary_rpc_method_handler(
          servicer.Do,
          request_deserializer=d20__pb2.Request.FromString,
          response_serializer=d20__pb2.Response.SerializeToString,
      ),
      'ResolveAlias': grpc.unary_unary_rpc_method_handler(
          servicer.ResolveAlias,
          request_deserializer=d20__pb2.Request.FromString,
          response_serializer=d20__pb2.Response.SerializeToString,
      ),
      'AtomicAdd': grpc.unary_unary_rpc_method_handler(
          servicer.AtomicAdd,
          request_deserializer=d20__pb2.Request.FromString,
          response_serializer=d20__pb2.Response.SerializeToString,
      ),
      'TxBegin': grpc.unary_unary_rpc_method_handler(
          servicer.TxBegin,
          request_deserializer=d20__pb2.TxBeginRequest.FromString,
          response_serializer=d20__pb2.TxBeginResponse.SerializeToString,
      ),
      'TxDo': grpc.unary_unary_rpc_method_handler(
          servicer.TxDo,
          request_deserializer=d20__pb2.Request.FromString,
          response_serializer=d20__pb2.Response.SerializeToString,
      ),
      'TxCommit': grpc.unary_unary_rpc_method_handler(
          servicer.TxCommit,
          request_deserializer=d20__pb2.TxCommitRequest.FromString,
          response_serializer=d20__pb2.TxCommitResponse.SerializeToString,
      ),
      'TxRollback': grpc.unary_unary_rpc_method_handler(
          servicer.TxRollback,
          request_deserializer=d20__pb2.TxRollbackRequest.FromString,
          response_serializer=d20__pb2.TxRollbackResponse.SerializeToString,
      ),
      'GetStream': grpc.unary_stream_rpc_method_handler(
          servicer.GetStream,
          request_deserializer=d20__pb2.Request.FromString,
          response_serializer=d20__pb2.Response.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'pb.Hector', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
